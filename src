import sqlite3
import tkinter as tk
from tkinter import messagebox

# Função para conectar ao banco de dados
def connect_db():
    conn = sqlite3.connect('biblioteca.db')
    cursor = conn.cursor()
    return conn, cursor

# Função para criar as tabelas
def create_tables():
    conn, cursor = connect_db()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Autores (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            Nome TEXT NOT NULL,
            Nacionalidade TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Livros (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            Titulo TEXT NOT NULL,
            AutorID INTEGER NOT NULL,
            AnoPublicacao INTEGER NOT NULL,
            Genero TEXT NOT NULL,
            FOREIGN KEY (AutorID) REFERENCES Autores(ID)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Emprestimos (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            LivroID INTEGER NOT NULL,
            DataEmprestimo TEXT NOT NULL,
            DataDevolucao TEXT NOT NULL,
            NomeUsuario TEXT NOT NULL,
            FOREIGN KEY (LivroID) REFERENCES Livros(ID)
        )
    ''')
    conn.commit()
    conn.close()

# Função para adicionar autor
def add_autor():
    nome = entry_nome_autor.get().strip()
    nacionalidade = entry_nacionalidade_autor.get().strip()
    if not nome or not nacionalidade:
        messagebox.showerror('Erro', 'Por favor, preencha todos os campos!')
        return
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)

# Função para adicionar livro
def add_livro():
    titulo = entry_titulo_livro.get().strip()
    autor_id = entry_autor_id.get().strip()
    ano = entry_ano_livro.get().strip()
    genero = entry_genero_livro.get().strip()
    if not titulo or not autor_id or not ano or not genero:
        messagebox.showerror('Erro', 'Por favor, preencha todos os campos!')
        return
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES (?, ?, ?, ?)',
                   (titulo, autor_id, ano, genero))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
    entry_titulo_livro.delete(0, tk.END)
    entry_autor_id.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)

# Função para adicionar empréstimo
def add_emprestimo():
    livro_id = entry_livro_id.get().strip()
    data_emp = entry_data_emp.get().strip()
    data_dev = entry_data_dev.get().strip()
    usuario = entry_nome_usuario.get().strip()
    if not livro_id or not data_emp or not data_dev or not usuario:
        messagebox.showerror('Erro', 'Por favor, preencha todos os campos!')
        return
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Emprestimos (LivroID, DataEmprestimo, DataDevolucao, NomeUsuario) VALUES (?, ?, ?, ?)',
                   (livro_id, data_emp, data_dev, usuario))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Empréstimo adicionado com sucesso!')
    entry_livro_id.delete(0, tk.END)
    entry_data_emp.delete(0, tk.END)
    entry_data_dev.delete(0, tk.END)
    entry_nome_usuario.delete(0, tk.END)

# Função para visualizar todos os livros
def view_livros():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Livros')
    livros = cursor.fetchall()
    conn.close()
    livros_list.delete(0, tk.END)
    for livro in livros:
        livros_list.insert(tk.END, livro)

# Função para visualizar todos os autores
def view_autores():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Autores')
    autores = cursor.fetchall()
    conn.close()
    autores_list.delete(0, tk.END)
    for autor in autores:
        autores_list.insert(tk.END, autor)

# Função para visualizar todos os empréstimos
def view_emprestimos():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos')
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, emp)

# Função para visualizar empréstimos atrasados
def view_atrasos():
    from datetime import datetime
    hoje = datetime.now().strftime('%Y-%m-%d')
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos WHERE DataDevolucao < ?', (hoje,))
    atrasos = cursor.fetchall()
    conn.close()
    atrasos_list.delete(0, tk.END)
    for atraso in atrasos:
        atrasos_list.insert(tk.END, atraso)

# Interface gráfica com Tkinter
root = tk.Tk()
root.title('Sistema de Biblioteca')
root.configure(bg='#ffcccb')  # Cor de fundo rosinha claro

# Frame para adicionar dados (autores, livros, empréstimos)
frame_adicionar = tk.Frame(root, bg='#ffcccb')
frame_adicionar.grid(row=0, column=0, padx=10, pady=10)

# Frame para adicionar autores
frame_autor = tk.LabelFrame(frame_adicionar, text='Adicionar Autor', bg='#ffcccb')
frame_autor.grid(row=0, column=0, padx=10, pady=5)

tk.Label(frame_autor, text='Nome:', bg='#ffcccb').grid(row=0, column=0)
entry_nome_autor = tk.Entry(frame_autor)
entry_nome_autor.grid(row=0, column=1)

tk.Label(frame_autor, text='Nacionalidade:', bg='#ffcccb').grid(row=1, column=0)
entry_nacionalidade_autor = tk.Entry(frame_autor)
entry_nacionalidade_autor.grid(row=1, column=1)

tk.Button(frame_autor, text='Adicionar Autor', command=add_autor, bg='white', fg='#d5006d', relief='flat').grid(row=2, columnspan=2, pady=5)

# Frame para adicionar livros
frame_livro = tk.LabelFrame(frame_adicionar, text='Adicionar Livro', bg='#ffcccb')
frame_livro.grid(row=1, column=0, padx=10, pady=5)

tk.Label(frame_livro, text='Título:', bg='#ffcccb').grid(row=0, column=0)
entry_titulo_livro = tk.Entry(frame_livro)
entry_titulo_livro.grid(row=0, column=1)

tk.Label(frame_livro, text='AutorID:', bg='#ffcccb').grid(row=1, column=0)
entry_autor_id = tk.Entry(frame_livro)
entry_autor_id.grid(row=1, column=1)

tk.Label(frame_livro, text='Ano Publicação:', bg='#ffcccb').grid(row=2, column=0)
entry_ano_livro = tk.Entry(frame_livro)
entry_ano_livro.grid(row=2, column=1)

tk.Label(frame_livro, text='Gênero:', bg='#ffcccb').grid(row=3, column=0)
entry_genero_livro = tk.Entry(frame_livro)
entry_genero_livro.grid(row=3, column=1)

tk.Button(frame_livro, text='Adicionar Livro', command=add_livro, bg='white', fg='#d5006d', relief='flat').grid(row=4, columnspan=2, pady=5)

# Frame para adicionar empréstimos
frame_emprestimo = tk.LabelFrame(frame_adicionar, text='Adicionar Empréstimo', bg='#ffcccb')
frame_emprestimo.grid(row=2, column=0, padx=10, pady=5)

tk.Label(frame_emprestimo, text='LivroID:', bg='#ffcccb').grid(row=0, column=0)
entry_livro_id = tk.Entry(frame_emprestimo)
entry_livro_id.grid(row=0, column=1)

tk.Label(frame_emprestimo, text='Data Empréstimo:', bg='#ffcccb').grid(row=1, column=0)
entry_data_emp = tk.Entry(frame_emprestimo)
entry_data_emp.grid(row=1, column=1)

tk.Label(frame_emprestimo, text='Data Devolução:', bg='#ffcccb').grid(row=2, column=0)
entry_data_dev = tk.Entry(frame_emprestimo)
entry_data_dev.grid(row=2, column=1)

tk.Label(frame_emprestimo, text='Nome Usuário:', bg='#ffcccb').grid(row=3, column=0)
entry_nome_usuario = tk.Entry(frame_emprestimo)
entry_nome_usuario.grid(row=3, column=1)

tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo, bg='white', fg='#d5006d', relief='flat').grid(row=4, columnspan=2, pady=5)

# Frame para visualizar dados
frame_visualizar = tk.LabelFrame(root, text='Visualizar', bg='#ffcccb')
frame_visualizar.grid(row=0, column=1, padx=10, pady=10)

# Botões para visualizar livros, autores, empréstimos e atrasos
tk.Button(frame_visualizar, text='Visualizar Livros', command=view_livros, bg='white', fg='#d5006d', relief='flat').grid(row=0, column=0, pady=2)
livros_list = tk.Listbox(frame_visualizar, height=5, width=50)  # Diminuindo a altura
livros_list.grid(row=1, column=0)

tk.Button(frame_visualizar, text='Visualizar Autores', command=view_autores, bg='white', fg='#d5006d', relief='flat').grid(row=2, column=0, pady=2)
autores_list = tk.Listbox(frame_visualizar, height=5, width=50)  # Diminuindo a altura
autores_list.grid(row=3, column=0)

tk.Button(frame_visualizar, text='Visualizar Empréstimos', command=view_emprestimos, bg='white', fg='#d5006d', relief='flat').grid(row=4, column=0, pady=2)
emprestimos_list = tk.Listbox(frame_visualizar, height=5, width=50)  # Diminuindo a altura
emprestimos_list.grid(row=5, column=0)

tk.Button(frame_visualizar, text='Visualizar Atrasos', command=view_atrasos, bg='white', fg='#d5006d', relief='flat').grid(row=6, column=0, pady=2)
atrasos_list = tk.Listbox(frame_visualizar, height=5, width=50)  # Diminuindo a altura
atrasos_list.grid(row=7, column=0)

create_tables()
root.mainloop()
